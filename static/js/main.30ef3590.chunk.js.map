{"version":3,"sources":["component/counter/index.js","App.js","reportWebVitals.js","index.js"],"names":["Counter","props","useState","value","setValue","validationMessage","setValidationMessage","useEffect","counterValue","onInputChange","a","checkMaxValue","className","onClick","type","onChange","e","Number","target","App","initialValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAIe,SAASA,EAAQC,GAC5B,MAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAkDF,mBAAS,MAA3D,mBAAOG,EAAP,KAA0BC,EAA1B,KAEAC,qBAAU,WACNH,EAASH,EAAMO,gBAChB,CAACP,EAAMO,eAEV,IAUIC,EAAa,uCAAG,WAAON,GAAP,SAAAO,EAAA,sEACVC,EAAcR,GADJ,kCAElBC,EAASD,GACTG,EAAqB,IAHH,sBAKlBA,EAAqB,2CALH,2CAAH,sDAUbK,EAAgB,SAACR,GACrB,OAAIA,GA9BU,KAmCd,OACI,sBAAKS,UAAU,UAAf,UACA,sBAAKA,UAAU,mBAAf,UACI,qBAAKA,UAAU,sCAAf,SACI,oBAAIC,QAAS,WA7BrBT,EAASD,EAAQ,IA6BT,iBAEJ,qBAAKS,UAAU,0BAAf,SACA,uBAAOE,KAAK,OAAOX,MAAOA,EAAOY,SAAU,SAACC,GAAD,OAAOP,EAAcQ,OAAOD,EAAEE,OAAOf,aAEhF,qBAAKS,UAAU,sCAAf,SACI,oBAAIC,QAAS,WA7CX,MAaPV,GAGHC,EAASD,EAAQ,IA6BT,oBAILE,GAAqB,4BAAIA,O,MCvCrBc,MAVf,WACE,MAAwCjB,mBAAS,GAAjD,mBAAOkB,EAAP,KAEA,OAFA,KAGE,qBAAKR,UAAU,MAAf,SACE,cAACZ,EAAD,CAASQ,aAAcY,OCIdC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.30ef3590.chunk.js","sourcesContent":["import React, {useEffect,useState} from 'react';\nimport './counter.scss'\n\nconst MAX_VALUE = 1000\nexport default function Counter(props) {\n    const [value, setValue] = useState(1);\n    const [validationMessage, setValidationMessage] = useState(null)\n\n    useEffect(() => {\n        setValue(props.counterValue)\n    }, [props.counterValue])    \n\n    const triggerDecrement = () => {\n        setValue(value - 1)\n    }\n    const triggerIncrement = () => {\n        if(value === MAX_VALUE) {\n            return \n        }\n        setValue(value + 1)\n    }\n\n  const onInputChange = async (value) => {\n    if (await checkMaxValue(value)) {\n      setValue(value)\n      setValidationMessage('')\n    } else {\n      setValidationMessage('you can not enter value greater than 1K')\n    }\n  }\n\n\n  const checkMaxValue = (value) => {\n    if (value <= MAX_VALUE) {\n      return true\n    }\n    return false\n  }\n    return (\n        <div className=\"counter\">\n        <div className=\"counterContainer\">\n            <div className=\"counterContainer__decrement onhover\">\n                <h1 onClick={() => triggerDecrement()}>-</h1>\n            </div>\n            <div className=\"counterContainer__value\">\n            <input type=\"text\" value={value} onChange={(e) => onInputChange(Number(e.target.value))} />\n            </div>\n            <div className=\"counterContainer__increment onhover\">\n                <h1 onClick={() => triggerIncrement()}>+</h1>\n            </div>\n        </div>\n        {\n           validationMessage && <p>{validationMessage}</p>\n        }\n        </div>\n    )\n}\n","import { useState, useEffect } from 'react'\nimport Counter from './component/counter'\nimport './App.css';\nfunction App() {\n  const [initialValue, setInitialValue] = useState(1);\n\n  return (\n    <div className=\"App\">\n      <Counter counterValue={initialValue} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}